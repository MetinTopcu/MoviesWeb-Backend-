// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movies.Services.Infrastructure.Persistence;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Movies.Services.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Movies.Services.Core.Domain.Entities.Categories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(80)
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Movies.Services.Core.Domain.Entities.Films", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeLimit")
                        .HasColumnType("integer");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriesId");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("Movies.Services.Core.Domain.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeLimit")
                        .HasColumnType("integer");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("Episode")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Season")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoriesId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Movies.Services.Core.Domain.Entities.Films", b =>
                {
                    b.HasOne("Movies.Services.Core.Domain.Entities.Categories", "Categories")
                        .WithMany("Films")
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Movies.Services.Core.Domain.Entities.Contents", "Contents", b1 =>
                        {
                            b1.Property<int>("FilmsId")
                                .HasColumnType("integer");

                            b1.Property<List<string>>("Name")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.HasKey("FilmsId");

                            b1.ToTable("Films");

                            b1.WithOwner()
                                .HasForeignKey("FilmsId");
                        });

                    b.Navigation("Categories");

                    b.Navigation("Contents")
                        .IsRequired();
                });

            modelBuilder.Entity("Movies.Services.Core.Domain.Entities.Movie", b =>
                {
                    b.HasOne("Movies.Services.Core.Domain.Entities.Categories", "Categories")
                        .WithMany("Movie")
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Movies.Services.Core.Domain.Entities.Contents", "Contents", b1 =>
                        {
                            b1.Property<int>("MovieId")
                                .HasColumnType("integer");

                            b1.Property<List<string>>("Name")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.HasKey("MovieId");

                            b1.ToTable("Movies");

                            b1.WithOwner()
                                .HasForeignKey("MovieId");
                        });

                    b.Navigation("Categories");

                    b.Navigation("Contents")
                        .IsRequired();
                });

            modelBuilder.Entity("Movies.Services.Core.Domain.Entities.Categories", b =>
                {
                    b.Navigation("Films");

                    b.Navigation("Movie");
                });
#pragma warning restore 612, 618
        }
    }
}
